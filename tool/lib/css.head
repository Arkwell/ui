// DO NOT EDIT
// Auto-generated
// Copyright (C) 2012 Potix Corporation. All Rights Reserved.
part of rikulo_view;

class _StyleImpl implements CSSStyleDeclaration {
  final View _view;
  _StyleImpl(View this._view);

  CSSStyleDeclaration get _st => _view.node.style;
  String _n(String n) => CSS.name(StringUtil.uncamelize(n));
  String _g(String n) => getPropertyValue(_n(n));
  void _s(String n, var v) => setProperty(_n(n), v, '');

  //@override
  String getPropertyValue(String propertyName)
  => _st.getPropertyValue(propertyName);
  //@override
  String removeProperty(String propertyName)
  => _st.removeProperty(propertyName);
  //@override
  CSSValue getPropertyCSSValue(String propertyName)
  => _st.getPropertyCSSValue(propertyName);
  //@override
  String getPropertyPriority(String propertyName)
  => _st.getPropertyPriority(propertyName);
  //@override
  String getPropertyShorthand(String propertyName)
  => _st.getPropertyShorthand(propertyName); 
  //@override
  bool isPropertyImplicit(String propertyName)
  => _st.isPropertyImplicit(propertyName);

  //@override
  void setProperty(String propertyName, String value, [String priority]) {
    if (?priority)
      _st.setProperty(propertyName, value, priority);
    else
      _st.setProperty(propertyName, value);
  }

  //@override
  String get cssText => _st.cssText;
  //@override
  void set cssText(String value) {
    final style = _st;
    style.cssText = value;
    style.left = CSS.px(_view.left);
    style.top = CSS.px(_view.top);
    if (_view.width != null)
      style.width = CSS.px(_view.width);
    if (_view.height != null)
      style.height = CSS.px(_view.height);
  }

  //@override
  int get length => _st.length;
  //@override
  String item(int index) => _st.item(index);
  //@override
  CSSRule get parentRule => _st.parentRule;

